///////////////////////////////////////////////
Asset loading/mapping via plain json file

"assets.json"
{
    "textures": {
        "player": "player.png",
        "enemy": "enemy.png"
    },
    "sounds": {
        "jump": "jump.ogg"
    },
    "fonts": {
        "main": "arial.ttf"
    },
    "groups": {
        "player": {
            "textures": [ // when multiple required
                "player"
            ],
            "sounds": [
                "jump"
            ],
            "texture": "player" // when just one required
        }
    }
}

"level.json"
{
    "assets": {
        "textures": [
            "enemy"
        ]
        "groups": [
            "player"
        ]
    },
    "etc"
}

- CLevel loads level.json
- CLevel loads assets into data cache from level.json
- data cache combines path value from json with path dir from engine.ini
- data cache loads from file

The level won't have entity-specific assets to load, only level-specific ones.
Individual entities will have their own assets they depend on, gotten somehow.
Maybe a virtual function that returns a vector of strings (IDs)? Or just a vector of strings set in the constructor?
Possibly a feature of CObject, or another abstract class - IAssetContainer - or something
///////////////////////////////////////////////

///////////////////////////////////////////////
engine.json
{
    "render": {
        "resolution": {
            "x": 240,
            "y": 160
        },
        "resizable": false
    },
    "dirs": {
        "texture": "res/textures/",
        "sound": "res/sounds/",
        "music": "res/music/",
        "font": "res/fonts/"
    },
    "assets": {
        "texture": {
            "player": "player.png",
            "enemy": "enemy.png"
        },
        "sound": {
            "jump": "player_jump.ogg"
        },
        "groups": {
            "player": {
                "texture": [
                    "player"
                ],
                "sound": [
                    "jump"
                ]
            }
        }
    }
}
///////////////////////////////////////////////

Entity:
- Array of asset IDs

Level:
- Local asset cache
- With each entity spawned, load/get asset via value in engine.json found at entity's key

Asset Cache:
- Either base class or final class used with composition that just holds loaded assets

enum class EAssetCategory : uint
{
    Texture,
    Sound,
    Font
}

struct SAssetHandle
{
    string id;
    string path;
    EAssetCategory category;
}

class CAssetCache
{
    unordered_map<SAssetHandle, unique_ptr<IAssetResource>> m_assets;
}

class CLevel : CAssetCache
{
    void loadFromFile(string path)
    {
        for (auto& entity : m_entities)
        {
            for (auto& entityAsset : entity->getRequiredAssets())
            {
                loadAsset(entityAsset);
            }
        }
    }
}

getLevel().loadAsset(EAssetCategory::Texture, "player_sprite");
getLevel().getAssetCache().load(EAssetCategory::Texture, "player_sprite");

class Entity
{
    vector<string> m_requiredAssets;
}

// assets.json or something
{
    "assets": [
        {
            "id": "player_sprite",
            "path": "res/textures/player_sprite.png",
            "type": "texture"
        }
    ]
}
