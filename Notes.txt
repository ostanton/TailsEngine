///////////////////////////////////////////////
Asset loading/mapping via plain json file

"assets.json"
{
    "textures": {
        "player": "player.png",
        "enemy": "enemy.png"
    },
    "sounds": {
        "jump": "jump.ogg"
    },
    "fonts": {
        "main": "arial.ttf"
    },
    "groups": {
        "player": {
            "textures": [ // when multiple required
                "player"
            ],
            "sounds": [
                "jump"
            ],
            "texture": "player" // when just one required
        }
    }
}

"level.json"
{
    "assets": {
        "textures": [
            "enemy"
        ]
        "groups": [
            "player"
        ]
    },
    "etc"
}

- CLevel loads level.json
- CLevel loads assets into data cache from level.json
- data cache combines path value from json with path dir from engine.ini
- data cache loads from file

The level won't have entity-specific assets to load, only level-specific ones.
Individual entities will have their own assets they depend on, gotten somehow.
Maybe a virtual function that returns a vector of strings (IDs)? Or just a vector of strings set in the constructor?
Possibly a feature of CObject, or another abstract class - IAssetContainer - or something
///////////////////////////////////////////////

///////////////////////////////////////////////
engine.json
{
    "render": {
        "resolution": {
            "x": 240,
            "y": 160
        },
        "resizable": false
    },
    "dirs": {
        "texture": "res/textures/",
        "sound": "res/sounds/",
        "music": "res/music/",
        "font": "res/fonts/"
    },
    "assets": {
        "texture": {
            "player": "player.png",
            "enemy": "enemy.png"
        },
        "sound": {
            "jump": "player_jump.ogg"
        },
        "groups": {
            "player": {
                "texture": [
                    "player"
                ],
                "sound": [
                    "jump"
                ]
            }
        }
    }
}
///////////////////////////////////////////////
